buildscript {
	ext {
		springBootVersion = '1.5.16.RELEASE'
	}
	repositories {
		maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/' }
		maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
group = 'com.shop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


configurations {
	mybatisGenerator
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'){
        exclude module: 'tomcat-jdbc'
	}
	compile(
		    [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.4'],
		    [group: 'mysql', name: 'mysql-connector-java', version: '8.0.12'],
			[group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'],
			[group: 'tk.mybatis', name: 'mapper', version: '3.4.2'],
			[group: 'com.belerweb', name: 'pinyin4j', version: '2.5.1'  ],
			[group: 'com.alibaba', name: 'fastjson', version: '1.2.58'],
		    [group: 'com.zaxxer', name: 'HikariCP', version: '2.6.1'  ],
		    [group: 'commons-io',name: 'commons-io', version: '2.4']
			)
	
}


ext {
	springCloudVersion = 'Edgware.SR3'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
String DB_PROPERTIES = "src/main/resources/config.properties"
String GENERATOR_CONFIG = "src/main/resources/generatorConfig.xml"
//
configurations {
	mybatisGenerator
}

dependencies{
	mybatisGenerator 'mysql:mysql-connector-java:8.0.12'
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
	mybatisGenerator 'tk.mybatis:mapper:4.1.5'
}

def getDbProperties = {
	def properties = new Properties()
	file(DB_PROPERTIES).withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}

task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: GENERATOR_CONFIG, verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}